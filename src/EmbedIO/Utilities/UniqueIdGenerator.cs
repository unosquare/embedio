using System;
using System.Globalization;

namespace EmbedIO.Utilities
{
    /// <summary>
    /// <para>Generates locally unique string IDs, mainly for logging purposes.</para>
    /// <para>IDs generated by this class are NOT random, NOT unpredictable, NOT evenly distributed, and NOT cryptographically secure.
    /// In other words, if you're looking for a GUID, use a <see cref="Guid"/>. You have been warned.</para>
    /// </summary>
    public static class UniqueIdGenerator
    {
        private const int LargePrimeNumber = 10388593; // Large 24-bit prime number

        private static readonly object _syncRoot = new object();

        private static long _lastTime;

        private static long _wraparoundCounter;

        /// <summary>
        /// Generates and returns a unique ID.
        /// </summary>
        /// <returns>The generated ID.</returns>
        public static string GetNext()
        {
            // Get the current UTC date and time, then take the lower 48 bits.
            // This will wrap around every 325 days.
            var time = DateTime.UtcNow.Ticks & 0xFFFFFFFFFFFFL;

            lock (_syncRoot)
            {
                // The time counter could have moved backwards because it has wrapped around,
                // or the computer's clock has been adjusted, or the time zone has changed.
                // If the time counter has not changed, we're generating new IDs at a fast rate
                // (got to be _very_ fast!)
                // In both cases, change the wraparound counter to minimize the risk of collisions.
                if (time <= _lastTime)
                {
                    // Instead of just incrementing, add a large 24-bit prime number.
                    // The counter's lower 24-bits will eventually wrap around,
                    // but hopefully it will take quite a long time.
                    _wraparoundCounter = (_wraparoundCounter + LargePrimeNumber) & 0xFFFFFF;
                }

                _lastTime = time;

                return time.ToString("x12", CultureInfo.InvariantCulture)
                     + _wraparoundCounter.ToString("x6", CultureInfo.InvariantCulture);
            }
        }
    }
}